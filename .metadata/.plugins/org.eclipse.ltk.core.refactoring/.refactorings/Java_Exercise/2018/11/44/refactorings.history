<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract method &apos;private static void createIntegerList()&apos; from &apos;org.mathi.stream.TestStream.main()&apos; to &apos;org.mathi.stream.TestStream&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Method name: &apos;createIntegerList&apos;&#x0D;&#x0A;- Destination type: &apos;org.mathi.stream.TestStream&apos;&#x0D;&#x0A;- Declared visibility: &apos;private&apos;" comments="false" description="Extract method &apos;createIntegerList&apos;" destination="0" exceptions="false" flags="786434" id="org.eclipse.jdt.ui.extract.method" input="/src&lt;org.mathi.stream{TestStream.java" name="createIntegerList" replace="false" selection="153 163" stamp="1541260269918" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Extract local variable &apos;findFirst&apos; from expression &apos;integerList.stream().findFirst()&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;findFirst&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().findFirst()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;findFirst&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="findFirst" replace="true" selection="238 33" stamp="1541260345287" version="1.0"/>&#x0A;<refactoring comment="Extract method &apos;private static Optional&lt;Integer&gt; howToUseFindFirst()&apos; from &apos;org.mathi.stream.TestStream.main()&apos; to &apos;org.mathi.stream.TestStream&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Method name: &apos;howToUseFindFirst&apos;&#x0D;&#x0A;- Destination type: &apos;org.mathi.stream.TestStream&apos;&#x0D;&#x0A;- Declared visibility: &apos;private&apos;" comments="false" description="Extract method &apos;howToUseFindFirst&apos;" destination="0" exceptions="false" flags="786434" id="org.eclipse.jdt.ui.extract.method" input="/src&lt;org.mathi.stream{TestStream.java" name="howToUseFindFirst" replace="false" selection="313 222" stamp="1541262140758" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Extract local variable &apos;allMatch&apos; from expression &apos;integerList.stream().allMatch(x -&gt; x == 2)&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;allMatch&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().allMatch(x -&gt; x == 2)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;allMatch&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="allMatch" replace="true" selection="415 39" stamp="1541262203390" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;anyMatch&apos; from expression &apos;integerList.stream().anyMatch(x -&gt; x % 4 == 0)&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;anyMatch&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().anyMatch(x -&gt; x % 4 == 0)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;anyMatch&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="anyMatch" replace="true" selection="516 41" stamp="1541262385950" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;integerList.stream().filter(x -&gt; x % 4 == 0).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().filter(x -&gt; x % 4 == 0).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="collect" replace="true" selection="656 68" stamp="1541262506041" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;count&apos; from expression &apos;integerList.stream().count()&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;count&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().count()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;count&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="count" replace="true" selection="836 29" stamp="1541262621052" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;distinct&apos; from expression &apos;integerList.stream().distinct()&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;distinct&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().distinct()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;distinct&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="distinct" replace="true" selection="918 32" stamp="1541262680858" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;integerList.stream().distinct().collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().distinct().collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="collect2" replace="true" selection="951 61" stamp="1541262725215" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;findAny&apos; from expression &apos;integerList.stream().findAny()&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;findAny&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().findAny()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;findAny&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="findAny" replace="true" selection="1085 31" stamp="1541262820586" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;flatMapToDouble&apos; from expression &apos;integerList.stream().flatMapToDouble((Function&lt;? super Integer,? extends DoubleStream&gt;)Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;flatMapToDouble&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().flatMapToDouble((Function&lt;? super Integer,? extends DoubleStream&gt;)Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;flatMapToDouble&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="flatMapToDouble" replace="true" selection="1338 112" stamp="1541263602732" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;reduce&apos; from expression &apos;integerList.stream().reduce((a,b) -&gt; a &gt; b?a:b)&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;reduce&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().reduce((a,b) -&gt; a &gt; b?a:b)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;reduce&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="reduce" replace="true" selection="1393 44" stamp="1541264198861" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;max&apos; from expression &apos;integerList.stream().max((a,b) -&gt; a &gt; b?a:b)&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;max&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().max((a,b) -&gt; a &gt; b?a:b)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;max&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="max" replace="true" selection="1536 41" stamp="1541264596319" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;min&apos; from expression &apos;integerList.stream().min(Comparator.comparing(Integer::intValue))&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Variable name: &apos;min&apos;&#x0D;&#x0A;- Destination method: &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;integerList.stream().min(Comparator.comparing(Integer::intValue))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;min&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;org.mathi.stream{TestStream.java" name="min" replace="true" selection="1698 66" stamp="1541264916379" version="1.0"/>&#x0A;&#x0A;&#x0A;<refactoring comment="Inline method &apos;org.mathi.stream.TestStream.howToUseFindFirst()&apos; in &apos;org.mathi.stream.TestStream&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Original element: &apos;org.mathi.stream.TestStream.howToUseFindFirst()&apos;&#x0D;&#x0A;- Remove method declaration" delete="true" description="Inline method &apos;howToUseFindFirst&apos;" flags="786434" id="org.eclipse.jdt.ui.inline.method" input="/src&lt;org.mathi.stream{TestStream.java" mode="0" selection="578 17" stamp="1541265295372" version="1.0"/>&#x0A;<refactoring comment="Inline local variable &apos;org.mathi.stream.TestStream.main().findFirst&apos; in &apos;org.mathi.stream.TestStream.main()&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Original element: &apos;org.mathi.stream.TestStream.main().findFirst&apos;" description="Inline local variable &apos;findFirst&apos;" id="org.eclipse.jdt.ui.inline.temp" input="/src&lt;org.mathi.stream{TestStream.java" selection="841 9" stamp="1541265312376" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;findFirst1&apos; in &apos;org.mathi.stream.TestStream.main(...)&apos; to &apos;findFirst&apos;&#x0D;&#x0A;- Original project: &apos;Java_Exercise&apos;&#x0D;&#x0A;- Original element: &apos;org.mathi.stream.TestStream.main(String[]).findFirst1&apos;&#x0D;&#x0A;- Renamed element: &apos;findFirst1&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;findFirst1&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;org.mathi.stream{TestStream.java[TestStream~main~\[QString;@findFirst1!544!768!562!571!QOptional\&lt;QInteger;&gt;;!0!false" name="findFirst" references="true" stamp="1541265321151" version="1.0"/>
</session>